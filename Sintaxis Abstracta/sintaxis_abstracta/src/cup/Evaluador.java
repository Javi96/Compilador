
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Jun 23 11:50:42 CEST 2018
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import alex.AnalizadorLexicoJLex;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.E;
import ast.S;
import ast.LDs;
import ast.LIs;
import ast.ASTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Jun 23 11:50:42 CEST 2018
  */
public class Evaluador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Evaluador() {super();}

  /** Constructor which sets the default scanner. */
  public Evaluador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Evaluador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\004\006\000\002\004\006\000\002\004\004" +
    "\000\002\004\004\000\002\005\007\000\002\005\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\012\004\000\002\012\004\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\006\032\004\033\007\001\002\000\004\031" +
    "\101\001\002\000\006\004\013\005\014\001\002\000\004" +
    "\002\001\001\002\000\004\031\012\001\002\000\004\002" +
    "\011\001\002\000\004\002\000\001\002\000\006\004\ufffb" +
    "\005\ufffb\001\002\000\004\031\022\001\002\000\006\032" +
    "\015\033\016\001\002\000\004\031\020\001\002\000\004" +
    "\031\017\001\002\000\006\004\ufffd\005\ufffd\001\002\000" +
    "\006\004\ufffe\005\ufffe\001\002\000\006\002\uffff\005\075" +
    "\001\002\000\004\006\023\001\002\000\020\011\037\012" +
    "\032\015\027\026\036\027\033\030\035\031\034\001\002" +
    "\000\040\002\uffe9\005\uffe9\007\uffe9\010\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\001\002\000\040\002\uffec\005" +
    "\uffec\007\uffec\010\uffec\013\uffec\014\uffec\015\uffec\016\062" +
    "\017\057\020\064\021\056\022\060\023\055\024\063\025" +
    "\061\001\002\000\020\002\ufff3\005\ufff3\007\051\010\052" +
    "\013\ufff3\014\ufff3\015\ufff3\001\002\000\020\011\037\012" +
    "\032\015\027\026\036\027\033\030\035\031\034\001\002" +
    "\000\014\002\ufff6\005\ufff6\013\ufff6\014\ufff6\015\ufff6\001" +
    "\002\000\012\002\ufff9\005\ufff9\014\043\015\045\001\002" +
    "\000\020\011\037\012\032\015\027\026\036\027\033\030" +
    "\035\031\034\001\002\000\040\002\uffe3\005\uffe3\007\uffe3" +
    "\010\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\001\002" +
    "\000\040\002\uffe4\005\uffe4\007\uffe4\010\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\001\002\000\040\002\uffe2\005" +
    "\uffe2\007\uffe2\010\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\001\002\000\040\002\uffe5\005\uffe5\007\uffe5\010\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\001\002\000\020" +
    "\011\037\012\032\015\027\026\036\027\033\030\035\031" +
    "\034\001\002\000\040\002\uffe6\005\uffe6\007\uffe6\010\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\001\002\000\040" +
    "\002\uffe7\005\uffe7\007\uffe7\010\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\001\002\000\010\013\044\014\043\015" +
    "\045\001\002\000\020\011\037\012\032\015\027\026\036" +
    "\027\033\030\035\031\034\001\002\000\040\002\uffe1\005" +
    "\uffe1\007\uffe1\010\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\001\002\000\020\011\037\012\032\015\027\026\036" +
    "\027\033\030\035\031\034\001\002\000\014\002\ufff7\005" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\001\002\000\014\002\ufff8" +
    "\005\ufff8\013\ufff8\014\ufff8\015\ufff8\001\002\000\040\002" +
    "\uffe8\005\uffe8\007\uffe8\010\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\001\002\000\020\011\037\012\032\015\027" +
    "\026\036\027\033\030\035\031\034\001\002\000\020\011" +
    "\037\012\032\015\027\026\036\027\033\030\035\031\034" +
    "\001\002\000\014\002\ufff4\005\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\001\002\000\014\002\ufff5\005\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\001\002\000\020\011\037\012\032\015\027\026" +
    "\036\027\033\030\035\031\034\001\002\000\020\011\037" +
    "\012\032\015\027\026\036\027\033\030\035\031\034\001" +
    "\002\000\020\011\037\012\032\015\027\026\036\027\033" +
    "\030\035\031\034\001\002\000\020\011\037\012\032\015" +
    "\027\026\036\027\033\030\035\031\034\001\002\000\020" +
    "\011\037\012\032\015\027\026\036\027\033\030\035\031" +
    "\034\001\002\000\020\011\037\012\032\015\027\026\036" +
    "\027\033\030\035\031\034\001\002\000\020\011\037\012" +
    "\032\015\027\026\036\027\033\030\035\031\034\001\002" +
    "\000\020\011\037\012\032\015\027\026\036\027\033\030" +
    "\035\031\034\001\002\000\024\002\ufff0\005\ufff0\007\ufff0" +
    "\010\ufff0\013\ufff0\014\ufff0\015\ufff0\024\063\025\061\001" +
    "\002\000\040\002\uffeb\005\uffeb\007\uffeb\010\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\001\002\000\024\002\ufff2" +
    "\005\ufff2\007\ufff2\010\ufff2\013\ufff2\014\ufff2\015\ufff2\024" +
    "\063\025\061\001\002\000\040\002\uffea\005\uffea\007\uffea" +
    "\010\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\001\002" +
    "\000\024\002\uffee\005\uffee\007\uffee\010\uffee\013\uffee\014" +
    "\uffee\015\uffee\024\063\025\061\001\002\000\024\002\ufff1" +
    "\005\ufff1\007\ufff1\010\ufff1\013\ufff1\014\ufff1\015\ufff1\024" +
    "\063\025\061\001\002\000\024\002\uffef\005\uffef\007\uffef" +
    "\010\uffef\013\uffef\014\uffef\015\uffef\024\063\025\061\001" +
    "\002\000\024\002\uffed\005\uffed\007\uffed\010\uffed\013\uffed" +
    "\014\uffed\015\uffed\024\063\025\061\001\002\000\004\031" +
    "\076\001\002\000\004\006\077\001\002\000\020\011\037" +
    "\012\032\015\027\026\036\027\033\030\035\031\034\001" +
    "\002\000\012\002\ufffa\005\ufffa\014\043\015\045\001\002" +
    "\000\006\004\ufffc\005\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\010\002\007\003\005\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\030" +
    "\007\027\010\025\011\024\012\023\013\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\047\013\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\041\007\027\010\025\011\024\012\023" +
    "\013\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\040\013\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\046\010\025\011\024\012\023\013\037" +
    "\001\001\000\002\001\001\000\014\007\045\010\025\011" +
    "\024\012\023\013\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\053\010\025\011" +
    "\024\012\023\013\037\001\001\000\012\010\052\011\024" +
    "\012\023\013\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\073\012\023\013\037\001\001\000\010" +
    "\011\072\012\023\013\037\001\001\000\010\011\071\012" +
    "\023\013\037\001\001\000\010\011\070\012\023\013\037" +
    "\001\001\000\006\012\067\013\037\001\001\000\010\011" +
    "\066\012\023\013\037\001\001\000\006\012\065\013\037" +
    "\001\001\000\010\011\064\012\023\013\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\077\007\027\010\025\011\024\012\023\013" +
    "\037\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Evaluador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Evaluador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Evaluador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoJLex alex = (AnalizadorLexicoJLex)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Evaluador$actions {


   private ASTiny as = new ASTiny();

  private final Evaluador parser;

  /** Constructor */
  CUP$Evaluador$actions(Evaluador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Evaluador$do_action_part00000000(
    int                        CUP$Evaluador$act_num,
    java_cup.runtime.lr_parser CUP$Evaluador$parser,
    java.util.Stack            CUP$Evaluador$stack,
    int                        CUP$Evaluador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Evaluador$result;

      /* select the action based on the action number */
      switch (CUP$Evaluador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Sp ::= Programa 
            {
              S RESULT =null;
		S valOfp = (S)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT=valOfp; 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("Sp",0, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Sp EOF 
            {
              Object RESULT =null;
		S start_val = (S)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-1)).value;
		RESULT = start_val;
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$Evaluador$parser.done_parsing();
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= LDS SEC LIS 
            {
              S RESULT =null;
		LDs valOfLds = (LDs)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		LIs valOfLis = (LIs)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT= as.programa(valOfLds,valOfLis); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("Programa",1, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDS ::= LDS NXT NUM VAR 
            {
              LDs RESULT =null;
		LDs valOfLds = (LDs)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-3)).value;
		String lexDeNum = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-1)).value;
		String lexDeVar = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.dCompuesta(valOfLds,lexDeNum,lexDeVar); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("LDS",2, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDS ::= LDS NXT BOOL VAR 
            {
              LDs RESULT =null;
		LDs valOfLds = (LDs)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-3)).value;
		String lexDeBool = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-1)).value;
		String lexDeVar = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.dCompuesta(valOfLds,lexDeBool,lexDeVar); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("LDS",2, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDS ::= NUM VAR 
            {
              LDs RESULT =null;
		String lexDeNum = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-1)).value;
		String lexDeVar = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.dSimple(lexDeNum,lexDeVar); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("LDS",2, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LDS ::= BOOL VAR 
            {
              LDs RESULT =null;
		String lexDeBool = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-1)).value;
		String lexDeVar = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.dSimple(lexDeBool,lexDeVar); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("LDS",2, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIS ::= LIS NXT VAR ASIG EXP0 
            {
              LIs RESULT =null;
		LIs valOfLis = (LIs)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-4)).value;
		String lexDeVar = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E valOfExp0 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.liCompuesta(valOfLis,lexDeVar,valOfExp0); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("LIS",3, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIS ::= VAR ASIG EXP0 
            {
              LIs RESULT =null;
		String lexDeVar = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E valOfExp0 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.liSimple(lexDeVar,valOfExp0); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("LIS",3, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP0 ::= EXP0 MAS EXP1 
            {
              E RESULT =null;
		E aOfExp0 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp1 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.suma(aOfExp0,aOfExp1); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP0",4, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP0 ::= EXP0 MENOS EXP1 
            {
              E RESULT =null;
		E aOfExp0 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp1 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.resta(aOfExp0,aOfExp1); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP0",4, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP0 ::= EXP1 
            {
              E RESULT =null;
		E valDeExp = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = valDeExp; 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP0",4, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP1 ::= EXP2 AND EXP1 
            {
              E RESULT =null;
		E aOfExp2 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp1 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.conj(aOfExp2,aOfExp1); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP1",5, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP1 ::= EXP2 OR EXP2 
            {
              E RESULT =null;
		E aOfExp2 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp2p = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.disy(aOfExp2,aOfExp2p); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP1",5, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP1 ::= EXP2 
            {
              E RESULT =null;
		E valDeExp = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = valDeExp; 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP1",5, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP2 ::= EXP3 MAY EXP3 
            {
              E RESULT =null;
		E aOfExp3 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp3p = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.may(aOfExp3,aOfExp3p); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP2 ::= EXP3 MEN EXP3 
            {
              E RESULT =null;
		E aOfExp3 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp3p = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.men(aOfExp3,aOfExp3p); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP2 ::= EXP3 MAYI EXP3 
            {
              E RESULT =null;
		E aOfExp3 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp3p = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.mayi(aOfExp3,aOfExp3p); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP2 ::= EXP3 MENI EXP3 
            {
              E RESULT =null;
		E aOfExp3 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp3p = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.meni(aOfExp3,aOfExp3p); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP2 ::= EXP3 IGUAL EXP3 
            {
              E RESULT =null;
		E aOfExp3 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp3p = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.igual(aOfExp3,aOfExp3p); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP2 ::= EXP3 DIST EXP3 
            {
              E RESULT =null;
		E aOfExp3 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp3p = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.dist(aOfExp3,aOfExp3p); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP2 ::= EXP3 
            {
              E RESULT =null;
		E valDeExp = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = valDeExp; 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP3 ::= EXP3 POR EXP4 
            {
              E RESULT =null;
		E aOfExp3 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp4 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.mul(aOfExp3,aOfExp4); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP3",7, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP3 ::= EXP3 DIV EXP4 
            {
              E RESULT =null;
		E aOfExp3 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-2)).value;
		E aOfExp4 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.div(aOfExp3,aOfExp4); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP3",7, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP3 ::= EXP4 
            {
              E RESULT =null;
		E valDeExp = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = valDeExp; 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP3",7, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP4 ::= MENOS EXP4 
            {
              E RESULT =null;
		E aOfExp4 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.signo(aOfExp4); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP4",8, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP4 ::= NOT EXP4 
            {
              E RESULT =null;
		E aOfExp4 = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.not(aOfExp4); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP4",8, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP4 ::= EXP5 
            {
              E RESULT =null;
		E valDeExp = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = valDeExp; 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP4",8, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP5 ::= NUMR 
            {
              E RESULT =null;
		String lexDeNum = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.real(lexDeNum); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP5 ::= VAR 
            {
              E RESULT =null;
		String lexDeVar = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.id(lexDeVar); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP5 ::= TRUE 
            {
              E RESULT =null;
		String lexDeTrue = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.trueCnt(); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP5 ::= FALSE 
            {
              E RESULT =null;
		String lexDeFalse = (String)((java_cup.runtime.Symbol) CUP$Evaluador$stack.peek()).value;
		 RESULT = as.falseCnt(); 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$Evaluador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP5 ::= PAP EXP0 PCIERRE 
            {
              E RESULT =null;
		E valDeExp = (E)((java_cup.runtime.Symbol) CUP$Evaluador$stack.elementAt(CUP$Evaluador$top-1)).value;
		 RESULT = valDeExp; 
              CUP$Evaluador$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$Evaluador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Evaluador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Evaluador$do_action(
    int                        CUP$Evaluador$act_num,
    java_cup.runtime.lr_parser CUP$Evaluador$parser,
    java.util.Stack            CUP$Evaluador$stack,
    int                        CUP$Evaluador$top)
    throws java.lang.Exception
    {
              return CUP$Evaluador$do_action_part00000000(
                               CUP$Evaluador$act_num,
                               CUP$Evaluador$parser,
                               CUP$Evaluador$stack,
                               CUP$Evaluador$top);
    }
}

